# An image for building manylinux1 wheels equivalent to those that
# https://github.com/sgillies/frs-wheel-builds makes for macosx.
#
# TODO: Figure out how to make the builds for osx!
#
# Note well: a very limited set of format drivers are included in these
# wheels. See the GDAL configuration below for details.

FROM quay.io/pypa/manylinux2014_x86_64

#RUN sed -i 's/enabled=1/enabled=0/' /etc/yum/pluginconf.d/fastestmirror.conf \
#    && sed -i 's/mirrorlist/#mirrorlist/' /etc/yum.repos.d/CentOS-Base.repo
    #&& sed -i 's|#baseurl=http://mirror.centos.org/centos/$releasever|baseurl=http://vault.centos.org/5.11|' /etc/yum.repos.d/CentOS-Base.repo

RUN yum update -y && yum install -y curl-devel json-c-devel zlib-devel libtiff-devel postgresql-devel cmake3
ARG NJOBS=32

# Install openssl
ARG OPENSSL_VERSION=1.1.1l
ARG OPENSSL_CHECKSUM=0b7a3e5e59c34827fe0c3a74b7ec8baef302b98fa80088d7f9153aa16fa76bd1
RUN mkdir -p /src \
    && cd /src \
    && curl -f -L -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \
    && echo "${OPENSSL_CHECKSUM}  openssl-${OPENSSL_VERSION}.tar.gz" > checksum \
    && sha256sum -c checksum \
    && tar zxf openssl-${OPENSSL_VERSION}.tar.gz \
    && cd /src/openssl-${OPENSSL_VERSION} \
    && ./config no-shared no-ssl2 no-async -fPIC -O2 \
    && make -j ${NJOBS} \
    && make install \
    && rm -rf /src

# Install curl
# ARG CURL_VERSION=7.80.0
# RUN mkdir -p /src \
#     && cd /src \
#     && curl -f -L -O https://curl.haxx.se/download/curl-${CURL_VERSION}.tar.gz \
#     && tar zxf curl-${CURL_VERSION}.tar.gz \
#     && cd /src/curl-${CURL_VERSION} \
#     && LIBS=-ldl CFLAGS="-O2 -Wl,-S" ./configure --with-ssl \
#     && make -j ${NJOBS} \
#     && make install \
#     && rm -rf /src

# Install geos
ARG GEOS_VERSION=3.10.2
RUN mkdir -p /src \
    && cd /src \
    && curl -f -L -O http://download.osgeo.org/geos/geos-${GEOS_VERSION}.tar.bz2 \
    && tar jxf geos-${GEOS_VERSION}.tar.bz2 \
    && cd /src/geos-${GEOS_VERSION} \
    && CFLAGS="-O2 -Wl,-S" CXXFLAGS="-O2 -Wl,-S" ./configure \
    && make -j ${NJOBS} \
    && make install \
    && rm -rf /src

# # Install jasper
# RUN mkdir -p /src \
#     && cd /src \
#     && curl -f -L -O http://download.osgeo.org/gdal/jasper-1.900.1.uuid.tar.gz \
#     && tar xzf jasper-1.900.1.uuid.tar.gz \
#     && cd /src/jasper-1.900.1.uuid \
#     && ./configure --disable-debug --enable-shared \
#     && make -j ${NJOBS} \
#     && make install \
#     && rm -rf /src

# proj4
ARG PROJ_VERSION=8.2.1
ENV PROJ_LIB=/usr/local/share/proj
RUN mkdir -p /src \
    && cd /src \
    && curl -f -L -O http://download.osgeo.org/proj/proj-${PROJ_VERSION}.tar.gz \
    && tar xzf proj-${PROJ_VERSION}.tar.gz \
    && cd /src/proj-${PROJ_VERSION} \
    && ./configure CFLAGS="-O2 -Wl,-S" \
    && make -j ${NJOBS} \
    && make install \
    && rm -rf /src

# cmake
# RUN cd /usr/local/src \
#     && curl -f -L -O http://www.cmake.org/files/v3.13/cmake-3.13.5.tar.gz \
#     && tar xzf cmake-3.13.5.tar.gz \
#     && cd cmake-3.13.5 \
#     && ./bootstrap --prefix=/usr/local/cmake \
#     && make -j ${NJOBS}; make install

# openjpeg
ARG OPENJPEG_VERSION=2.4.0
RUN mkdir -p /src \
    && cd /src \
    && curl -f -L -O https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz \
    && tar xzf v${OPENJPEG_VERSION}.tar.gz \
    && cd /src/openjpeg-${OPENJPEG_VERSION} \
    && mkdir -p build \
    && cd build \
    && cmake .. -DBUILD_THIRDPARTY:BOOL=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local \
    && make -j ${NJOBS} install \
    && make clean \
    && rm -rf /src

# hdf5
ARG HDF5_VERSION=1.12.1
RUN cd /usr/local/src \
    && curl -f -L -O https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz \
    && tar xzf hdf5-${HDF5_VERSION}.tar.gz \
    && cd hdf5-${HDF5_VERSION} \
    && ./configure --prefix=/usr/local --enable-shared --enable-build-mode=production CFLAGS="-O2 -Wl,-S" \
    && make -j ${NJOBS} \
    && make install

## netcdf
ARG NETCDF_VERSION=4.6.2
RUN cd /usr/local/src \
    #&& curl -f -L -O ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-${NETCDF_VERSION}.tar.gz \
    && curl -f -L https://github.com/Unidata/netcdf-c/archive/refs/tags/v${NETCDF_VERSION}.tar.gz --output netcdf-${NETCDF_VERSION}.tar.gz \
    && tar xzf netcdf-${NETCDF_VERSION}.tar.gz \
    && cd netcdf-c-${NETCDF_VERSION} \
    && CFLAGS="-I/usr/local/include -O2 -Wl,-S" CXXFLAGS="-I/usr/local/include -O2 -Wl,-S" LDFLAGS="-L/usr/local/lib" ./configure \
    && make -j ${NJOBS} \
    && make install

## expat
ARG EXPAT_VERSION=2.2.6
RUN cd /usr/local/src \
    && curl -f -L -O https://github.com/libexpat/libexpat/releases/download/R_${EXPAT_VERSION//./_}/expat-${EXPAT_VERSION}.tar.bz2 \
    && tar xjf expat-${EXPAT_VERSION}.tar.bz2 \
    && cd expat-${EXPAT_VERSION} \
    && CFLAGS="-O2 -Wl,-S" ./configure --prefix=/usr/local \
    && make -j ${NJOBS} \
    && make install

## webp
ARG LIBWEBP_VERSION=1.0.3
RUN cd /usr/local/src \
    && curl -f -L -O https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-${LIBWEBP_VERSION}.tar.gz \
    && tar xzf libwebp-${LIBWEBP_VERSION}.tar.gz \
    && cd libwebp-${LIBWEBP_VERSION} \
    && CFLAGS="-O2 -Wl,-S" ./configure --prefix=/usr/local \
    && make -j ${NJOBS} \
    && make install

# TODO --with-pg
# gdal
ARG GDAL_VERSION=3.4.2
RUN mkdir -p /src \
    && cd /src \
    && curl -f -L -O http://download.osgeo.org/gdal/${GDAL_VERSION}/gdal-${GDAL_VERSION}.tar.gz \
    && tar xzf gdal-${GDAL_VERSION}.tar.gz \
    && cd /src/gdal-${GDAL_VERSION} \
    && CFLAGS="-O2 -Wl,-S" CXXFLAGS="-O2 -Wl,-S" ./configure \
        --with-threads \
        --disable-debug \
        --disable-static \
        --without-grass \
        --without-libgrass \
        --without-jpeg12 \
        --with-libtiff \
        --with-jpeg \
        --without-pg \
        --with-gif \
        --with-png \
        --with-webp \
        --with-geotiff=internal \
        --with-sqlite3=/usr \
        --with-pcraster=internal \
        --with-pcidsk=internal \
        --with-bsb \
        --with-grib \
        --with-pam \
        --with-geos=/usr/local/bin/geos-config \
        --with-static-proj4=/usr/local \
        --with-expat=/usr/local \
        --with-libjson-c \
        --with-libiconv-prefix=/usr \
        --with-libz=/usr \
        --with-curl=/usr/local/bin/curl-config \
        --with-netcdf=/usr/local/netcdf \
        --with-openjpeg \
        --without-jasper \
        --with-hdf5=/usr/local \
        --without-python \
        --without-hdf4 \
    && make -j 12 \
    && make install

# Bake dev requirements into the Docker image for faster builds
ADD requirements.txt /tmp/requirements.txt
RUN for PYBIN in /opt/python/*/bin; do \
        $PYBIN/pip install -U pip || true; \
        $PYBIN/pip install -r /tmp/requirements.txt || true; \
    done

# Replace SWIG's setup.py with this modified one, which gets numpy in
# there as a dependency.
#ADD setup.py /src/gdal-2.4.4/swig/python/setup.py

# Replace the osgeo module __init__.py with this modified one, which
# sets the GDAL_DATA and PROJ_LIB variables on import to where they've
# been copied to.
#ADD gdalinit.py /src/gdal-2.4.4/swig/python/osgeo/__init__.py

WORKDIR /io
CMD ["/io/build-linux-wheels.sh"]
